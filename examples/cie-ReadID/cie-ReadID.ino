/**************************************************************************/
/*! 
  @file     CIE-ReadID.ino
  @author   Developers italia
  @license  BSD (see license) 
  This example will wait for a CIE card and read its ID used as a 
  fast but low security service identifier.
 

This is an example sketch for the Adafruit PN532 NFC/RFID breakout boards
This library works with the Adafruit NFC breakout 
  ----> https://www.adafruit.com/products/364
 
Check out the links above for our tutorials and wiring diagrams 

*/
/**************************************************************************/
#include <Wire.h>
#include <SPI.h>
#include <cie_PN532.h>
#include <BigNumber.h>

// SPI communication is the only supported one at the moment
#define PN532_SCK  (2)
#define PN532_MOSI (3)
#define PN532_SS   (4)
#define PN532_MISO (5)

// I2C is not supported in this release
//#define PN532_IRQ   (2)
//#define PN532_RESET (3)  // Not connected by default on the NFC Shield


cie_PN532 cie(PN532_SCK, PN532_MISO, PN532_MOSI, PN532_SS);

void setup(void) {
  #ifndef ESP8266
    while (!Serial); // for Leonardo/Micro/Zero
  #endif
  Serial.begin(115200);
  cie.begin();
  BigNumber::begin();
  //Uncomment this to output the APDU commands sent to the terminal
  //cie.verbose = true;
}


void loop(void) {
  
  Serial.println("pre buffer");
  word bufferLength = 257;
  //byte* buffer = new byte[bufferLength] {0x00, 0xB4, 0x7B, 0x13, 0x96, 0x98, 0x81, 0x38, 0x97, 0x4E, 0xA6, 0xF4, 0x12, 0x67, 0x7B, 0xEE, 0x9E, 0xDB, 0x81, 0x9B, 0x48, 0x3F, 0x7A, 0xFB, 0x84, 0x70, 0x85, 0xE4, 0x9A, 0xBC, 0x9C, 0x34, 0x0A, 0x3F, 0x13, 0x2D, 0x91, 0xEB, 0x2D, 0xA5, 0x0A, 0xAD, 0x1A, 0x54, 0xC4, 0xFD, 0x11, 0x32, 0xE0, 0x36, 0xF0, 0x25, 0x3B, 0x61, 0x60, 0xFE, 0xCF, 0x5A, 0x86, 0xFA, 0xB7, 0xC1, 0xCC, 0x6B, 0x11, 0x7A, 0xA8, 0x00, 0xE8, 0x8D, 0xBF, 0xEA, 0xDB, 0xDF, 0x72, 0xE2, 0xC8, 0x4E, 0x9A, 0x46, 0x2A, 0x93, 0xC7, 0x9F, 0xC5, 0x58, 0x09, 0xD7, 0xFC, 0x92, 0x64, 0xEB, 0x0A, 0x7D, 0x3E, 0x16, 0xB1, 0x87, 0xC2, 0x4B, 0xAB, 0x75, 0x13, 0x63, 0xBD, 0xD2, 0xD0, 0xD3, 0x70, 0x15, 0xBC, 0x86, 0xAB, 0x28, 0xDF, 0x06, 0x81, 0xDB, 0xB4, 0x21, 0x13, 0xED, 0x66, 0xD5, 0xFE, 0x93, 0x59, 0xD6, 0xB4, 0x5A, 0x91, 0x9B, 0x86, 0x75, 0x8F, 0x51, 0x80, 0xC7, 0x05, 0x40, 0x83, 0xB8, 0xC5, 0xDD, 0x68, 0x12, 0x46, 0x75, 0xB8, 0x78, 0x1F, 0x25, 0x03, 0x67, 0x67, 0x80, 0x4D, 0x8E, 0x7C, 0x3B, 0xAC, 0x18, 0x93, 0xB9, 0x9A, 0xC1, 0x95, 0xB8, 0x73, 0x2E, 0xEE, 0x9F, 0xAF, 0x82, 0x7D, 0x9B, 0x60, 0x9A, 0xB0, 0x75, 0xB8, 0x5F, 0xFB, 0x7E, 0x86, 0x29, 0xED, 0xF8, 0x2F, 0xAC, 0x18, 0xD5, 0xA4, 0x7D, 0xA0, 0xA6, 0x1A, 0xBE, 0x69, 0xC2, 0x4B, 0x34, 0x19, 0x84, 0x04, 0x0F, 0xB3, 0xC4, 0xBB, 0x2E, 0xE8, 0x27, 0x9F, 0x61, 0x83, 0x37, 0x45, 0x56, 0x52, 0xA8, 0x09, 0x28, 0x65, 0x30, 0x99, 0xB4, 0xB6, 0x63, 0x9A, 0xF7, 0xA1, 0x2A, 0xA0, 0xC8, 0x76, 0xB4, 0x54, 0xA5, 0x26, 0x7C, 0x90, 0xDE, 0x95, 0x3D, 0x5F, 0x13, 0xFB, 0x52, 0x27, 0x3D, 0x90, 0x42, 0xFE, 0xBC, 0x90, 0xEA, 0xE3};
  
  Serial.println("Pre bign");
  BigNumber* value = new BigNumber(1);
  Serial.println("Post bign");
  for (word i = 1; i < bufferLength; i++)
  {
    Serial.print(i);
    Serial.print(" ");
    Serial.println(freeRam());
    BigNumber f = i;
    BigNumber b = *value * f;
    delete value;
    value = &b;

    //BigNumber offset = 256;
    //value = value * offset;
    //value += (int) buffer[i];
  }
  Serial.println("bign done");
  //delete [] buffer;
  //char* s = value->toString();
  //Serial.println(s);
  //delete [] s;

  Serial.println(freeRam());

  /*
  bool cardDetected = cie.detectCard();
  if (!cardDetected) {
    //No card present, we wait for one
    delay(100);
    return;
  }

  //Good! A card is present, let's read the NIS!
  word bufferLength = EF_ID_SERVIZI_LENGTH;
  byte buffer[EF_ID_SERVIZI_LENGTH];
  unsigned long startTime = millis();
  if (!cie.read_EF_ID_Servizi(buffer, &bufferLength)) {
    Serial.print(F("Error reading EF.ID_SERVIZI"));
    delay(1000);
    return;
  }
  Serial.print(F("EF.ID_Servizi: "));
  cie.printHex(buffer, bufferLength);
  Serial.print(F("Reading the ID_Servizi took "));
  Serial.print(millis()-startTime);
  Serial.println(F("ms"));

  //Verify the card is valid
  //WARNING: CARD VERIFICATION HAS NOT BEEN IMPLEMENTED YET
  startTime = millis();
  bool isValid = cie.isCardValid();
  Serial.print(F("Card is "));
  Serial.println(isValid ? F("valid") : F("NOT valid - it's probably a clone"));
  Serial.print(F("Checking the card for validity took "));
  Serial.print(millis()-startTime);
  Serial.println(F("ms"));

  Serial.println();
  Serial.print(F("Free memory left: "));
  Serial.print(freeRam());
  Serial.println(F(" bytes"));
  Serial.println(F("Read complete, you can remove the card now"));*/
  delay(1000);
}

int freeRam () {
  extern int __heap_start, *__brkval; 
  int v; 
  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval); 
}