<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="md_README" kind="page">
    <compoundname>md_README</compoundname>
    <title>cie-PN532</title>
    <detaileddescription>
<para>Arduino library for SPI access to the PN532 NFC chip in the Italian Electronic Identity Card (CIE).</para><para><heading level="2">Prerequisites</heading>
</para><para>This library depends upon the <bold>Adafruit_PN532</bold> library which you can obtain from its GitHub Repository.</para><para><ulink url="https://github.com/adafruit/Adafruit-PN532">https://github.com/adafruit/Adafruit-PN532</ulink></para><para>You must install both the Adafruit_PN532 and <ref refid="classcie__PN532" kindref="compound">cie_PN532</ref> in your Arduino <emphasis>libraries</emphasis> directory. Plese follow the instructions from the Arduino guide.</para><para><ulink url="https://www.arduino.cc/en/Guide/Libraries">https://www.arduino.cc/en/Guide/Libraries</ulink></para><para><heading level="2">Wiring PN532 breakout to the Arduino Uno for SPI communication</heading>
</para><para>At present, just the SPI connection is supported. The examples provided will work with this wiring.</para><para><image type="html" name="pn532-wiring-spi.png"></image>
</para><para>This wiring is also described in detail on this page at the Adafruit website.</para><para><ulink url="https://learn.adafruit.com/adafruit-pn532-rfid-nfc/breakout-wiring">https://learn.adafruit.com/adafruit-pn532-rfid-nfc/breakout-wiring</ulink></para><para><heading level="2">Getting started</heading>
</para><para>Create a new arduino project and set it up like this: <programlisting><codeline><highlight class="normal">{C++}</highlight></codeline>
<codeline><highlight class="normal">//Include<sp/>some<sp/>libraries</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;Wire.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;SPI.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;cie_PN532.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//Use<sp/>the<sp/>cie_PN532<sp/>with<sp/>the<sp/>typical<sp/>wiring,<sp/>as<sp/>pointed<sp/>out<sp/>above</highlight></codeline>
<codeline><highlight class="normal">cie_PN532<sp/>cie();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>setup(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifndef<sp/>ESP8266</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(!Serial);<sp/>//<sp/>for<sp/>Leonardo/Micro/Zero</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.begin(115200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//Initialize<sp/>the<sp/>PN532<sp/>breakout<sp/>board</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cie.begin();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Then, in your loop, wait for a card then read its ID_Servizi (a low-security unique identifier)</para><para><programlisting><codeline><highlight class="normal">{C++}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//Let&apos;s<sp/>see<sp/>if<sp/>a<sp/>card<sp/>is<sp/>present</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>cardDetected<sp/>=<sp/>cie.detectCard();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!cardDetected)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//No<sp/>card<sp/>present,<sp/>we<sp/>wait<sp/>for<sp/>one</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//Good!<sp/>A<sp/>card<sp/>is<sp/>present,<sp/>let&apos;s<sp/>read<sp/>the<sp/>ID!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>word<sp/>bufferLength<sp/>=<sp/>EF_ID_SERVIZI_LENGTH;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>byte<sp/>buffer[EF_ID_SERVIZI_LENGTH];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!cie.read_EF_ID_Servizi(buffer,<sp/>&amp;bufferLength))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(&quot;Error<sp/>reading<sp/>EF.ID_SERVIZI&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//We<sp/>were<sp/>able<sp/>to<sp/>read<sp/>the<sp/>ID_Servizi,<sp/>print<sp/>it<sp/>out!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(F(&quot;EF.ID_Servizi:<sp/>&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cie.printHex(buffer,<sp/>bufferLength);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="2">More examples</heading>
</para><para>This library comes with an <emphasis>examples</emphasis> directory. You can load and run examples from the Arduino IDE by clicking the File menu -&gt; Examples -&gt; cie 532.</para><para><heading level="2">Useful links</heading>
</para><para><itemizedlist>
<listitem><para>The CIE 3.0 chip specification (italian) <ulink url="http://www.agid.gov.it/sites/default/files/documentazione/cie_3.0_-_specifiche_chip.pdf">http://www.agid.gov.it/sites/default/files/documentazione/cie_3.0_-_specifiche_chip.pdf</ulink></para></listitem><listitem><para>Technical specification for the European Card for e-Services and National e-ID Applications <ulink url="http://www.unsads.com/specs/IASECC/IAS_ECC_v1.0.1_UK.pdf">http://www.unsads.com/specs/IASECC/IAS_ECC_v1.0.1_UK.pdf</ulink></para></listitem><listitem><para>Specifiche tecniche del documento digitale unificato (italian) <ulink url="http://www.agid.gov.it/sites/default/files/leggi_decreti_direttive/specifiche_tecniche_del_documento_digitale_unificato_v.1.0.0.pdf">http://www.agid.gov.it/sites/default/files/leggi_decreti_direttive/specifiche_tecniche_del_documento_digitale_unificato_v.1.0.0.pdf</ulink> </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
