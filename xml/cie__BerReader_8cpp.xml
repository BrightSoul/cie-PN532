<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="cie__BerReader_8cpp" kind="file" language="C++">
    <compoundname>cie_BerReader.cpp</compoundname>
    <includes refid="cie__BerReader_8h" local="yes">cie_BerReader.h</includes>
    <incdepgraph>
      <node id="108">
        <label>cie_EFPath.h</label>
        <link refid="cie__EFPath_8h"/>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>cie_BerReader.cpp</label>
        <link refid="cie_BerReader.cpp"/>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>Adafruit_PN532.h</label>
      </node>
      <node id="107">
        <label>cie_BerReader.h</label>
        <link refid="cie__BerReader_8h"/>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>cie_BerTriple.h</label>
        <link refid="cie__BerTriple_8h"/>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>cie_PN532.h</label>
        <link refid="cie__PN532_8h"/>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>Arduino.h</label>
      </node>
      <node id="113">
        <label>cie_AtrReader.h</label>
        <link refid="cie__AtrReader_8h"/>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="cie__BerReader_8cpp_1af1c2e36c6022e42c193ec5110244f094" prot="public" static="no">
        <name>PN532DEBUGPRINT</name>
        <initializer>Serial</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cie_BerReader.cpp" line="16" column="10" bodyfile="cie_BerReader.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Developers Italia  BSD (see License)</para></simplesect>
Reads and parses a BER encoded binary content</para><sect1 id="cie__PN532_8h_1HISTORY">
<title>HISTORY</title>
<para>v1.0 - Reading of fragments and binary values </para></sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="14"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cie__BerReader_8h" kindref="compound">cie_BerReader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PN532DEBUGPRINT<sp/>Serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//Please<sp/>refer<sp/>to<sp/>https://en.wikipedia.org/wiki/X.690#Identifier_octets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">cie_BerReader::cie_BerReader<sp/>(<ref refid="classcie__PN532" kindref="compound">cie_PN532</ref>*<sp/>cie)<sp/>:</highlight></codeline>
<codeline lineno="21"><highlight class="normal">_cie(cie),</highlight></codeline>
<codeline lineno="22"><highlight class="normal">_currentOffset(0)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="38"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcie__BerReader_1a3c8abcfbee8fe9e5f51615102b2ebd1d" kindref="member">cie_BerReader::readTriples</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcie__EFPath" kindref="compound">cie_EFPath</ref><sp/>filePath,<sp/>cieBerTripleCallbackFunc<sp/>callback,<sp/>word*<sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>maxDepth)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>resetCursor();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDepth<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.println(F(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>you<sp/>choose<sp/>a<sp/>maxDepth<sp/>of<sp/>0<sp/>which<sp/>won&apos;t<sp/>read<sp/>any<sp/>triple&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>byte<sp/>currentDepth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>byte<sp/>triplesCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="classcie__BerTriple" kindref="compound">cie_BerTriple</ref>*<sp/>tripleStack[maxDepth];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>willEncapsulate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>byte<sp/>oid_subjectKeyIdentifier[]<sp/>=<sp/>{0x67,<sp/>0x81,<sp/>0x08,<sp/>0x01,<sp/>0x01,<sp/>0x01};<sp/></highlight><highlight class="comment">//2.5.29.14<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>byte<sp/>oid_keyUsage[]<sp/>=<sp/>{0x55,<sp/>0x1D,<sp/>0x0F};<sp/></highlight><highlight class="comment">//2.5.29.15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>byte<sp/>oid_authorityKeyIdentifier[]<sp/>=<sp/>{0x55,<sp/>0x1D,<sp/>0x23};<sp/></highlight><highlight class="comment">//2.5.29.35</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>byte<sp/>oid_rsaEncryption[]<sp/>=<sp/>{0x2A,<sp/>0x86,<sp/>0x48,<sp/>0x86,<sp/>0xF7,<sp/>0x0D,<sp/>0x01,<sp/>0x01,<sp/>0x01};<sp/></highlight><highlight class="comment">//1.2.840.113549.1.1.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>byte<sp/>oid_mRTDSignatureData[]<sp/>=<sp/>{0x67,<sp/>0x81,<sp/>0x08,<sp/>0x01,<sp/>0x01,<sp/>0x01};<sp/></highlight><highlight class="comment">//2.23.136.1.1.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcie__BerTriple" kindref="compound">cie_BerTriple</ref><sp/>currentTriple;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>tripleStack[currentDepth-1]<sp/>=<sp/>&amp;currentTriple;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>word<sp/>tripleLength;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readTriple(filePath,<sp/>tripleStack[currentDepth-1],<sp/>&amp;tripleLength))<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>tripleStack[currentDepth-1]-&gt;depth<sp/>=<sp/>currentDepth;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*callback<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(*callback)(tripleStack[currentDepth-1]))<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Navigation<sp/>interrupted<sp/>by<sp/>callback,<sp/>we<sp/>stop<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>triplesCount<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tripleStack[currentDepth-1]-&gt;contentLength<sp/>&gt;<sp/>BER_READER_MAX_LENGTH)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.print(F(</highlight><highlight class="stringliteral">&quot;Sorry,<sp/>we<sp/>don&apos;t<sp/>support<sp/>content<sp/>lengths<sp/>greater<sp/>than<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.println(BER_READER_MAX_LENGTH);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tripleStack[currentDepth-1]-&gt;contentOffset<sp/>&gt;<sp/>BER_READER_MAX_OFFSET)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.print(F(</highlight><highlight class="stringliteral">&quot;Sorry,<sp/>we<sp/>don&apos;t<sp/>support<sp/>content<sp/>offsets<sp/>greater<sp/>than<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.println(BER_READER_MAX_OFFSET);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(triplesCount<sp/>&gt;<sp/>BER_READER_MAX_COUNT)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.print(F(</highlight><highlight class="stringliteral">&quot;Sorry,<sp/>we<sp/>don&apos;t<sp/>support<sp/>as<sp/>many<sp/>triples<sp/>as<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.println(BER_READER_MAX_COUNT);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>word<sp/>contentLength<sp/>=<sp/>tripleStack[currentDepth-1]-&gt;contentLength;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentDepth<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*length<sp/>=<sp/>tripleLength;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>we&apos;ve<sp/>finished<sp/>reading<sp/>a<sp/>parent<sp/>(or<sp/>granparent)<sp/>triple<sp/>and<sp/>go<sp/>up<sp/>levels<sp/>accordingly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentDepth<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>can<sp/>go<sp/>up<sp/>only<sp/>if<sp/>we&apos;re<sp/>not<sp/>at<sp/>the<sp/>root<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(byte<sp/>i<sp/>=<sp/>currentDepth-1;<sp/>i&gt;0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>isBinaryString<sp/>=<sp/>tripleStack[i-1]-&gt;type<sp/>==<sp/>0x03<sp/>||<sp/>tripleStack[i-1]-&gt;type<sp/>==<sp/>0x04;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isObjectIdentifier<sp/>=<sp/>tripleStack[i-1]-&gt;type<sp/>==<sp/>0x06;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstructed<sp/>=<sp/>tripleStack[i-1]-&gt;encoding<sp/>==<sp/>0x01;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLastInParent<sp/>=<sp/>_currentOffset<sp/>+<sp/>contentLength<sp/>&gt;=<sp/>tripleStack[i-2]-&gt;contentOffset<sp/>+<sp/>tripleStack[i-2]-&gt;contentLength;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>canGoDown<sp/>=<sp/>currentDepth<sp/>+<sp/>1<sp/>&lt;=<sp/>maxDepth;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stillToRead<sp/>=<sp/>_currentOffset<sp/>&lt;<sp/>tripleStack[i-1]-&gt;contentOffset<sp/>+<sp/>tripleStack[i-1]-&gt;contentLength;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Some<sp/>OCTET<sp/>STRINGS<sp/>and<sp/>BIT<sp/>STRING<sp/>might<sp/>be<sp/>encapsulating<sp/>other<sp/>ASN.1<sp/>triples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Find<sp/>them<sp/>by<sp/>their<sp/>preceding<sp/>Object<sp/>Identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isObjectIdentifier)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>oid[tripleStack[i-1]-&gt;contentLength];<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_cie-&gt;<ref refid="classcie__PN532_1ae5bf51526446549cbc4df8e64e9dbbe5" kindref="member">readBinaryContent</ref>(filePath,<sp/>oid,<sp/>tripleStack[i-1]-&gt;contentOffset,<sp/>tripleStack[i-1]-&gt;contentLength);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(areEqual(oid,<sp/>tripleStack[i-1]-&gt;contentLength,<sp/>oid_subjectKeyIdentifier,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(oid_subjectKeyIdentifier))<sp/>||</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>areEqual(oid,<sp/>tripleStack[i-1]-&gt;contentLength,<sp/>oid_keyUsage,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(oid_keyUsage))<sp/>||<sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>areEqual(oid,<sp/>tripleStack[i-1]-&gt;contentLength,<sp/>oid_authorityKeyIdentifier,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(oid_authorityKeyIdentifier))<sp/>||<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>areEqual(oid,<sp/>tripleStack[i-1]-&gt;contentLength,<sp/>oid_rsaEncryption,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(oid_rsaEncryption))<sp/>||<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(areEqual(oid,<sp/>tripleStack[i-1]-&gt;contentLength,<sp/>oid_mRTDSignatureData,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(oid_mRTDSignatureData))<sp/>&amp;&amp;<sp/>(currentDepth+1&lt;=maxDepth)))<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>willEncapsulate<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isBinaryString<sp/>&amp;&amp;<sp/>willEncapsulate)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isConstructed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>willEncapsulate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLastInParent<sp/>&amp;&amp;<sp/>!(isConstructed<sp/>&amp;&amp;<sp/>canGoDown<sp/>&amp;&amp;<sp/>stillToRead))<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentDepth-=1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Let&apos;s<sp/>see<sp/>if<sp/>we<sp/>should<sp/>go<sp/>down<sp/>one<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstructed<sp/>=<sp/>tripleStack[currentDepth-1]-&gt;encoding<sp/>==<sp/>0x01;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAtBeginning<sp/>=<sp/>_currentOffset<sp/>==<sp/>tripleStack[currentDepth-1]-&gt;contentOffset;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasNonZeroLength<sp/>=<sp/>tripleStack[currentDepth-1]-&gt;contentLength<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>canGoDown<sp/>=<sp/>currentDepth<sp/>+<sp/>1<sp/>&lt;=<sp/>maxDepth;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isConstructed<sp/>&amp;&amp;<sp/>isAtBeginning<sp/>&amp;&amp;<sp/>hasNonZeroLength<sp/>&amp;&amp;<sp/>canGoDown)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentDepth<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_currentOffset<sp/>+=<sp/>contentLength;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(_currentOffset<sp/>&lt;<sp/>*length);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="171"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cie_BerReader::readTriple(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcie__EFPath" kindref="compound">cie_EFPath</ref><sp/>filePath,<sp/><ref refid="classcie__BerTriple" kindref="compound">cie_BerTriple</ref>*&amp;<sp/>triple,<sp/>word*<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>byte<sp/>tagOctets,<sp/>lengthOctets;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!detectTag(filePath,<sp/>&amp;triple-&gt;classification,<sp/>&amp;triple-&gt;encoding,<sp/>&amp;triple-&gt;type,<sp/>&amp;tagOctets)<sp/>||</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="classcie__AtrReader_1a17a40b339347d156e5974bf71ce23b62" kindref="member">detectLength</ref>(filePath,<sp/>&amp;triple-&gt;contentOffset,<sp/>&amp;triple-&gt;contentLength,<sp/>&amp;lengthOctets))<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>triple-&gt;offset<sp/>=<sp/>triple-&gt;contentOffset<sp/>-<sp/>tagOctets<sp/>-<sp/>lengthOctets;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>*length<sp/>=<sp/>tagOctets<sp/>+<sp/>lengthOctets<sp/>+<sp/>triple-&gt;contentLength;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="195"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cie_BerReader::readTripleValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcie__BerTriple" kindref="compound">cie_BerTriple</ref><sp/>triple,<sp/>byte*<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>resetCursor();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>leggi<sp/>valore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="213"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cie_BerReader::detectLength(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcie__EFPath" kindref="compound">cie_EFPath</ref><sp/>filePath,<sp/>word*<sp/>contentOffset,<sp/>word*<sp/>contentLength,<sp/>byte*<sp/>lengthOctets)<sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readOctet(filePath,<sp/>lengthOctets))<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.println(F(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>detect<sp/>length<sp/>of<sp/>a<sp/>BER<sp/>encoded<sp/>file&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*lengthOctets<sp/>==<sp/>0b10000000)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Indefinite<sp/>mode,<sp/>we<sp/>don&apos;t<sp/>currently<sp/>support<sp/>this<sp/>as<sp/>it&apos;s<sp/>sloooooow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.println(F(</highlight><highlight class="stringliteral">&quot;Indefinite<sp/>length<sp/>for<sp/>BER<sp/>encoded<sp/>file<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*lengthOctets<sp/>&amp;<sp/>0b10000000)<sp/>==<sp/>0b10000000)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Definite,<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//In<sp/>the<sp/>initial<sp/>octet,<sp/>bit<sp/>8<sp/>is<sp/>1,<sp/>and<sp/>bits<sp/>1–7<sp/>(excluding<sp/>the<sp/>values<sp/>0<sp/>and<sp/>127)<sp/>encode<sp/>the<sp/>number<sp/>of<sp/>octets<sp/>that<sp/>follow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*lengthOctets<sp/>&amp;=<sp/>0b1111111;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*lengthOctets<sp/>==<sp/>0<sp/>||<sp/>*lengthOctets<sp/>==<sp/>127)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.println(F(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>for<sp/>a<sp/>BER<sp/>encoded<sp/>file<sp/>length&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*contentLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte*<sp/>buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>byte[*lengthOctets];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>readOctets(filePath,<sp/>buffer,<sp/>*lengthOctets);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>following<sp/>octets<sp/>encode,<sp/>as<sp/>big-endian,<sp/>the<sp/>length<sp/>(which<sp/>may<sp/>be<sp/>0)<sp/>as<sp/>a<sp/>number<sp/>of<sp/>octets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(byte<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*lengthOctets;<sp/>i++)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*contentLength<sp/>&lt;&lt;=<sp/>8;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*contentLength<sp/>|=<sp/>buffer[i];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Don&apos;t<sp/>forget<sp/>to<sp/>add<sp/>the<sp/>first<sp/>length<sp/>octet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*lengthOctets+=1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>buffer;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Definite,<sp/>short</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*contentLength<sp/>=<sp/>*lengthOctets;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*lengthOctets<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>*contentOffset<sp/>=<sp/>_currentOffset;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="267"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cie_BerReader::detectTag<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcie__EFPath" kindref="compound">cie_EFPath</ref><sp/>filePath,<sp/>byte*<sp/>classification,<sp/>byte*<sp/>encoding,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>type,<sp/>byte*<sp/>tagOctets)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>byte<sp/>tag;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readOctet(filePath,<sp/>&amp;tag))<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.println(F(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>detect<sp/>a<sp/>tag<sp/>in<sp/>the<sp/>BER<sp/>content&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bit<sp/>6<sp/>encodes<sp/>whether<sp/>the<sp/>type<sp/>is<sp/>primitive<sp/>or<sp/>constructed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>*encoding<sp/>=<sp/>(byte)((tag<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>0b1);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bit<sp/>7–8<sp/>encode<sp/>the<sp/>class<sp/>of<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>*classification<sp/>=<sp/>(byte)((tag<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0b11);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bits<sp/>1–5<sp/>encode<sp/>the<sp/>tag<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>*type<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>(tag<sp/>&amp;<sp/>0b11111);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Where<sp/>the<sp/>identifier<sp/>is<sp/>not<sp/>universal,<sp/>its<sp/>tag<sp/>number<sp/>may<sp/>be<sp/>too<sp/>large<sp/>for<sp/>the<sp/>5-bit<sp/>tag<sp/>field,<sp/>so<sp/>it<sp/>is<sp/>encoded<sp/>in<sp/>further<sp/>octets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bits<sp/>1–5<sp/>are<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*type<sp/>==<sp/>0b11111)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*type<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>tag<sp/>number<sp/>is<sp/>encoded<sp/>in<sp/>the<sp/>following<sp/>octets,<sp/>where<sp/>bit<sp/>8<sp/>of<sp/>each<sp/>is<sp/>1<sp/>if<sp/>there<sp/>are<sp/>more<sp/>octets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>moreOctets<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*tagOctets<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tagOctets<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readOctet(filePath,<sp/>&amp;tag))<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PN532DEBUGPRINT.println(F(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>detect<sp/>a<sp/>tag<sp/>in<sp/>the<sp/>BER<sp/>content&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bits<sp/>1–7<sp/>encode<sp/>the<sp/>tag<sp/>number.<sp/>The<sp/>tag<sp/>number<sp/>bits<sp/>combined,<sp/>big-endian,<sp/>encode<sp/>the<sp/>tag<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*type<sp/>&lt;&lt;=<sp/>7;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*type<sp/>|=<sp/>(byte)(tag<sp/>&amp;<sp/>0b1111111);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bit<sp/>8<sp/>of<sp/>each<sp/>is<sp/>1<sp/>if<sp/>there<sp/>are<sp/>more<sp/>octets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moreOctets<sp/>=<sp/>((tag<sp/>&amp;<sp/>0b10000000)<sp/>==<sp/>0b10000000);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(moreOctets);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>*tagOctets<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="324"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cie_BerReader::readOctets(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcie__EFPath" kindref="compound">cie_EFPath</ref><sp/>filePath,<sp/>byte*<sp/>buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>word<sp/>offset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>word<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_cie-&gt;<ref refid="classcie__PN532_1ae5bf51526446549cbc4df8e64e9dbbe5" kindref="member">readBinaryContent</ref>(filePath,<sp/>buffer,<sp/>offset,<sp/>length))<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>_currentOffset<sp/>=<sp/>offset+length;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="344"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cie_BerReader::readOctets(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcie__EFPath" kindref="compound">cie_EFPath</ref><sp/>filePath,<sp/>byte*<sp/>buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>word<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readOctets(filePath,<sp/>buffer,<sp/>_currentOffset,<sp/>length);</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="358"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cie_BerReader::readOctet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcie__EFPath" kindref="compound">cie_EFPath</ref><sp/>filePath,<sp/>byte*<sp/>octet)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readOctets(filePath,<sp/>octet,<sp/>_currentOffset,<sp/>1);</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cie_BerReader::areEqual(byte*<sp/>buffer1,<sp/>byte<sp/>length1,<sp/>byte*<sp/>buffer2,<sp/>byte<sp/>length2)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length1<sp/>!=<sp/>length2)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(byte<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer1[i]<sp/>!=<sp/>buffer2[i])<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="381"><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cie_BerReader::resetCursor()<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>_currentOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="cie_BerReader.cpp"/>
  </compounddef>
</doxygen>
